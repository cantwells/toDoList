{"version":3,"sources":["components/Form.jsx","components/Task.jsx","App.js","index.js"],"names":["Form","React","memo","onSubmit","value","handleChange","isDisabled","type","name","onChange","placeholder","className","disabled","Task","id","text","checked","onChangeInput","removeTask","HandleInputChange","htmlFor","onClick","App","useState","tasks","state","setState","setValue","error","setError","useEffect","allTasks","localStorage","getItem","JSON","parse","setItem","stringify","copyTasks","forEach","task","findTask","find","idx","indexOf","splice","event","preventDefault","newTask","Date","getTime","target","some","item","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.456c99bb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const Form = React.memo(({onSubmit, value, handleChange, isDisabled}) => {\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input type=\"text\"\r\n                name=\"task\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                placeholder=\"Описание\"\r\n                className=\"field\"\r\n            />\r\n            <button type=\"submit\" className=\"btn\" disabled={isDisabled}>Добавить</button>\r\n        </form>\r\n    )\r\n});\r\n\r\nForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n    value: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    isDisabled: PropTypes.bool\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Task = React.memo(({ id, text, checked, onChangeInput, removeTask }) => {\r\n    const HandleInputChange = id => {\r\n        onChangeInput(id);\r\n    }\r\n    return (\r\n        <li className=\"itemTask\" >\r\n            <div className=\"inputBlock\">\r\n            <input type=\"checkbox\"\r\n                    className=\"customCheckbox\" \r\n                    id={id}\r\n                    checked={checked}\r\n                    onChange={() => HandleInputChange(id)}\r\n                    />\r\n            <label htmlFor={id}>{text}</label>\r\n            </div>\r\n            <span className=\"close\" onClick={() => removeTask(id, checked)}>x</span>\r\n        </li>\r\n    )\r\n});\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    checked: PropTypes.bool.isRequired,\r\n    onChangeInput: PropTypes.func.isRequired,\r\n    removeTask: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport { Form } from './components/Form';\r\nimport Task from './components/Task';\r\n\r\nconst App = React.memo(() => {\r\n  const [state, setState] = useState({ tasks: [] });\r\n  const [value, setValue] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect( () => {\r\n    const allTasks = localStorage.getItem('toDoList');\r\n    if(allTasks) setState({ tasks: JSON.parse(allTasks)});\r\n  }, []);\r\n\r\n  useEffect( () => {\r\n    localStorage.setItem('toDoList', JSON.stringify(state.tasks) );\r\n  }, [state.tasks])\r\n\r\n  const handleChange = event => {\r\n    setValue(event.target.value);\r\n  }\r\n\r\n  const onSubmit = event => {\r\n    event.preventDefault();\r\n    const newTask = {}\r\n    newTask.id = `task${new Date().getTime()}`;\r\n    newTask.text = value;\r\n    newTask.checked = false;\r\n    newTask.error = error;\r\n    if(value){\r\n      setState({ tasks: [...state.tasks, newTask]});\r\n      setValue('');\r\n    }\r\n  }\r\n\r\n  const isCheckMarked = () => state.tasks.some(item => item.checked);\r\n  \r\n  const onChangeInput = id => {\r\n    const copyTasks = [...state.tasks];\r\n    copyTasks.forEach( task => {\r\n      if(task.id === id) task.checked = !task.checked; \r\n    })\r\n    setState({ tasks: copyTasks});\r\n  }\r\n  \r\n  const removeTask = (id, checked) => {\r\n    if(!checked){\r\n      const copyTasks = [...state.tasks];\r\n      const findTask = copyTasks.find( task => task.id === id);\r\n      const idx = copyTasks.indexOf(findTask);\r\n      copyTasks.splice(idx, 1);\r\n      setState({ tasks: copyTasks});\r\n      setError('');\r\n    }else {\r\n      setError('Нельзя удалить');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"main\">\r\n        <h1>toDoList</h1>    \r\n        <Form onSubmit={onSubmit} \r\n              value={value} \r\n              handleChange={handleChange} \r\n              isDisabled={!value}  \r\n            />\r\n        <div className={`error ${(error && isCheckMarked()) && ' show'}`}>{error}</div>\r\n        <ul className=\"items\">\r\n          {\r\n            state.tasks.map( task => <Task key={task.id} \r\n                                            id={task.id} \r\n                                            text={task.text} \r\n                                            checked={task.checked}\r\n                                            onChangeInput={onChangeInput}\r\n                                            removeTask={removeTask}\r\n                                            error={task.error}\r\n                                            /> )\r\n          }            \r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}